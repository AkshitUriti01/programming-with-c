// Print even and odd numbers in a given range
#include <stdio.h>

void range(int n) {
    printf("Even Numbers:");
    printf("\tOdd numbers:");
    for (int i=1; i<=n; i++) {
        if (i%2 == 0) {
            printf("%d\n", i);
        } else if (i%2 == 1) {
            printf("\t\t%d\n", i);
        }
    }
}

int main(void) {
    range(10);
}


// Find power of a number
#include <stdio.h>

long int power(int base, int exp) { 
    long int result=1;

    while (exp != 0) {
        result = result * base;
        exp--;
    }
    
    return result;
}

int main(void) {
    int b,e;

    printf("Enter base and exponent: ");
    scanf("%d %d", &b, &e);
    
    printf("%ld\n", power(b,e));
}

// Return maximum of given two numbers
#include <stdio.h>

void max_min(int a, int b) {
    if (a >= b) {
        printf("%d is bigger.\n", a);
    } else {
        printf("%d is bigger.\n", b);
    }
} 

int main(void) {
    int i,j;

    printf("Enter two numbers: ");
    scanf("%d %d", &i, &j);

    max_min(i,j);
}


// To print all strong numbers between given interval using functions
#include <stdio.h>
#include <stdbool.h>  

int factorial(int num) {
    int fact=1;
    for (int i=1; i<= num; i++) {
        fact = fact * i;
    }

    return fact;
}

bool strong(int num) {
    int temp=num, sum=0, last_digit;

    while (num != 0) {
        last_digit = num % 10;
        sum = sum + factorial(last_digit);
        num = num/10;
    }

    if (temp == sum) {
        return true;
    } else {
        return false;
    }
}

void print_strong(int start, int end) {
    for (int i=start; i<=end; i++) {
        if (strong(i)) {
            printf("The strong numbers are:\n%d\t", i);
        } 
    }
}

int main(void) {
    print_strong(100,999);
}


// Check whether a number is prime or perfect number using functions.
#include <stdio.h>

void prime(int num) {
    for (int i=1; i<=num; i++) {
        if (num%i == 0) {
            printf("%d is composite number.", num);
        }
    }
}

void perfect(int num) {
    int temp=num, last_digit, sum=0;
    
    for (int i=1; i<=num; i++) {
        if (num%i == 0) {
            sum = sum + i;
        }
    }

    if (sum == temp) {
        printf("%d is perfect number", num);
    } 
}

void armstrong(int num) {
    // complete this part
}


// Find power of any number using recursion
#include <stdio.h>

int power (int base, int exp) {
    if (exp != 0) {
        return (base * power(base, exp-1));
    } else {
        return 1;
    }
}

int main(void) {
    int b,e;
    printf("Enter base and exponent: ");
    scanf("%d %d", &b, &e);

    printf("The power is %d\n", power(b,e));
}

// Generate Fibonacci series using recursion
#include<stdio.h>
 
int Fibonacci(int n)
{
   if ( n == 0 )
      return 0;
   else if ( n == 1 )
      return 1;
   else
      return ( Fibonacci(n-1) + Fibonacci(n-2) );
} 
 
int main()
{
   int n, i = 0, c;
 
   scanf("%d",&n);
 
   printf("Fibonacci series: \n");
 
   for ( c = 1 ; c <= n ; c++ )
   {
      printf("\t%d\n", Fibonacci(i));
      i++; 
   }
 
   return 0;
}
 

// Find product of two numbers using recursion
// product of two numbers using recursion

#include <stdio.h>
int product(int a, int b) {
    if (a < b) {
        return product(b,a);
    } else if (b != 0) {
        return (a + product(a,b-1));
    } else {
        return 0;
    }
}

int main (void) {
    int i,j;
    scanf("%d %d", &i, &j);
    printf("%d\n", product(i,j));
}

// Find GCD (HCF) of two numbers using recursion
#include <stdio.h>

int hcf(int n1, int n2) {
    if (n2 != 0) {
        return hcf(n2, n1 % n2);
    } else {
        return n1;
    }    
}

int main (void) {
    int n1, n2;
    printf("Enter two positive integers: ");
    scanf("%d %d", &n1, &n2);
    printf("G.C.D of %d and %d is %d.\n", n1, n2, hcf(n1, n2));
}



// Find LCM of two numbers using recursion
#include <stdio.h>


/* Function declaration */
int lcm(int a, int b);


int main()
{
    int num1, num2, LCM;

    /* Input two numbers from user */
    printf("Enter any two numbers to find lcm: ");
    scanf("%d%d", &num1, &num2);
    
    /*
     * Ensures that first parameter of LCM function 
     * is always less than second 
     */
    if(num1 > num2)
        LCM = lcm(num2, num1);
    else
        LCM = lcm(num1, num2);
        
    printf("LCM of %d and %d = %d", num1, num2, LCM);
    
    return 0;
}


/**
 * Recursive function to find lcm of two numbers 'a' and 'b'.
 * Here 'a' needs to be always less than 'b'.
 */
int lcm(int a, int b)
{
    static int multiple = 0;
    
    /* Increments multiple by adding max value to it */
    multiple += b;
    
    /*
     * Base condition of recursion
     * If found a common multiple then return the multiple.
     */
    if((multiple % a == 0) && (multiple % b == 0))
    {
        return multiple;
    }
    else 
    {
        return lcm(a, b);
    }
}